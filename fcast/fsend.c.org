/* $Id: fsend.c,v 1.9 2004/02/04 17:15:37 roca Exp $ */
/*
 *  Copyright (c) 1999-2002 INRIA - Universite Paris 6 - All rights reserved
 *  (main authors: Julien Laboure - julien.laboure@inrialpes.fr
 *                 Vincent Roca - vincent.roca@inrialpes.fr)
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 *  USA.
 */

/*
 * fsend.c
 *
 *	fcast sender side functions
 */
#include "fcast.h"

/*
 * Local variables
 */
int fec_code = MCL_FEC_CODE_NULL; /* FEC code that will be used by the sender */
	/* XXX: The current version uses a single FEC code for the whole */
	/* session even if FEC can be specified on a per-object basis. */
int max_fragment_size;	/* Big files are fragmented into fragments of this
			   size */


void FcastSend (void)
{
	int mcl_max_block_size; /* maximum size of a source block in bytes; */
				/* depends on the FEC codec used and its */
				/* limitations on the "k" parameter */
	int Bytes_sent = 0;
#if defined(ALC)
	int mcl_option;
#endif /* RM_PROTOCOL */


	if (fec_ratio > 1.0) {
#if defined(ALC)
		/*
		 * The user asked for FEC, so choose the codec.
		 * Try LDGM first, and if not applicable, revert to RSE
		 * NB: not supported by NORM currently...
		 */
#if 0
#else  /* 0 */	/* comment #else to test with RSE */
		fec_code = MCL_FEC_CODE_LDGM;
		if (mcl_ctl(id, MCL_OPT_SET_FEC_CODE, (void*)&fec_code,
				sizeof(fec_code)))
#endif /* 0 */
#elif defined(NORM)
		/* use RSE ! */
#endif /* RM_PROTOCOL */
		{
			fec_code = MCL_FEC_CODE_RSE;
			if (mcl_ctl(id, MCL_OPT_SET_FEC_CODE, (void*)&fec_code,
					sizeof(fec_code))) {
				EXIT(("Fcast: ERROR, no FEC codec available\n"))
			}
		}
		if (mcl_ctl(id, MCL_OPT_FEC_RATIO, (void*)&fec_ratio, sizeof(fec_ratio)))
			EXIT(("Fcast: ERROR, mcl_ctl failed for FEC_RATIO\n"))
	} else {
		/*
		 * No FEC packet, so set the FEC code to NULL.
		 */
		fec_code = MCL_FEC_CODE_NULL;
		if (mcl_ctl(id, MCL_OPT_SET_FEC_CODE, (void*)&fec_code,
				sizeof(fec_code))) {
			EXIT(("Fcast: ERROR, FEC codec NULL not available\n"))
		}	
	}
	/*
	 * Determine the maximum block size.
	 * This maximum is defined by the MCL library, depending on
	 * the FEC code in use, but it must not exceed the value
	 * specified in the * XXX_MAX_FRAGMENT_SIZE constant.
	 */
	if (mcl_ctl(id, MCL_OPT_GET_MAX_BLOCK_SIZE_FOR_CURRENT_FEC,
		    (void*)&mcl_max_block_size, sizeof(mcl_max_block_size))) {
		EXIT(("Fcast: ERROR, mcl_ctl failed for MCL_OPT_GET_MAX_BLOCK_SIZE_FOR_CURRENT_FEC\n"))
	}
	/*printf("mcl_max_block_size=%d\n", mcl_max_block_size);*/
	ASSERT(mcl_max_block_size > 0);
	switch (fec_code) {
	case MCL_FEC_CODE_RSE:
		max_fragment_size = min(RSE_MAX_FRAGMENT_SIZE,
					mcl_max_block_size - MAX_TRAILER_SIZE);
		/* tests the MCL blocking algorithm: define a large frag size */
		/* max_fragment_size = 512*1024; */
		break;
#if defined(ALC)
	case MCL_FEC_CODE_LDGM:
		max_fragment_size = min(LDPC_MAX_FRAGMENT_SIZE,
					mcl_max_block_size - MAX_TRAILER_SIZE);
		break;
#endif /* RM_PROTOCOL */
	default:
		/* no FEC encoding... */
		max_fragment_size = min(NO_FEC_MAX_FRAGMENT_SIZE,
					mcl_max_block_size - MAX_TRAILER_SIZE);
		break;
	}
#if defined(ALC)
	/*
	 * NB: always use LCT1 now, in all cases...
	 */
	mcl_option = MCL_SCHED_LCT1;
	if (mcl_ctl(id, MCL_OPT_SCHED, (void*)&mcl_option, sizeof(mcl_option))) {
		EXIT(("Fcast: mcl_ctl MCL_OPT_SCHED failed for LCT1\n"))
	}
#if 0
	if (tx_huge_file > 0)
		mcl_option = MCL_SCHED_LCT3;
	else
		mcl_option = MCL_SCHED_LCT2;
	if (single_layer == 0) {
		/*
		 * set the scheduling mode, except for single layer where
		 * LCT1 is required
		 */
		if (mcl_ctl(id, MCL_OPT_SCHED, (void*)&mcl_option,
				sizeof(mcl_option)))
			EXIT(("Fcast: mcl_ctl MCL_OPT_SCHED failed\n"))
	}
#endif
	if (optimode == OPTIMIZE_SPACE)
	{
		mcl_option = MCL_SCHED_PARTIALLY_MIXED_ORDER;
		if (mcl_ctl(id, MCL_OPT_OBJ_SCHED, (void*)&mcl_option,
				sizeof(mcl_option)))
			EXIT(("Fcast: mcl_ctl MCL_OPT_SCHED failed\n"))
	}
	else if (optimode == OPTIMIZE_SPEED)
	{
		mcl_option = MCL_SCHED_MIXED_ORDER;
		if (mcl_ctl(id, MCL_OPT_OBJ_SCHED, (void*)&mcl_option, sizeof(mcl_option)))
			EXIT(("Fcast: mcl_ctl MCL_OPT_OBJ_SCHED failed\n"))
	}
	else if (optimode == OPTIMIZE_CPU)
	{
		mcl_option = MCL_SCHED_MIXED_ORDER;
		if (mcl_ctl(id, MCL_OPT_OBJ_SCHED, (void*)&mcl_option, sizeof(mcl_option)))
			EXIT(("Fcast: mcl_ctl MCL_OPT_OBJ_SCHED failed\n"))
	}
	else
	{
		EXIT(("Fcast: ERROR, invalid optimization mode!"))
	}
#elif defined(NORM)
	/* no equivalent */
#endif /* RM_PROTOCOL */

/*
	mcl_option = 1;
	mcl_ctl(id, MCL_OPT_REUSE_APPLI_TX_BUFFER, (void*)&mcl_option, sizeof(mcl_option));
*/
	
	if (recursive) {
#if defined(ALC)
		if(mcl_ctl(id, MCL_OPT_KEEP_DATA, NULL, 0))
			EXIT(("Fcast: mcl_ctl KEEP_DATA failed\n"))
#endif /* RM_PROTOCOL */
		Bytes_sent = RecursiveSend(fileparam);
#if defined(ALC)
		if(mcl_ctl(id, MCL_OPT_PUSH_DATA, NULL, 0))
			EXIT(("Fcast: mcl_ctl PUSH_DATA failed\n"))
#endif /* RM_PROTOCOL */
	}
	else
	{
#if defined(ALC)
		if(mcl_ctl(id, MCL_OPT_KEEP_DATA, NULL, 0))
			EXIT(("Fcast: mcl_ctl KEEP_DATA returned an error\n"))
#endif /* RM_PROTOCOL */
		Bytes_sent = SendThisFile(fileparam, max_fragment_size);
#if defined(ALC)
		if(mcl_ctl(id, MCL_OPT_PUSH_DATA, NULL, 0))
			EXIT(("Fcast: mcl_ctl PUSH_DATA returned an error\n"))
#endif /* RM_PROTOCOL */
	}

	mcl_close(id);
	PRINT(("\nFcastSend complete. %d bytes sent\n", Bytes_sent))
}



#ifdef WIN32

int RecursiveSend (char* Path)
{

	HANDLE			dirp = NULL;
	WIN32_FIND_DATA entry;

	unsigned int total_sent = 0;
	char FullName[MAX_PATH + MAX_FILENAME];
	char FindString[MAX_PATH];
	strcpy(FindString, Path);
	strcat(FindString, "\\*");
	
	dirp = FindFirstFile(FindString, &entry);

	if (dirp == INVALID_HANDLE_VALUE)
	{
		EXIT(("Fcast: ERROR, in recursive mode, the given parameter MUST BE a valid directory name\nAborting...\n"))
	}

	if (!IsDirDots (entry.cFileName))
	{
		strcpy(FullName, Path);
		if(FullName[strlen(FullName)-1] == '\\')
			FullName[strlen(FullName)-1] = '/';

		if(FullName[strlen(FullName)-1] != '/')
			strcat(FullName,"/");

		strcat(FullName, entry.cFileName);

		if( entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			ASSERT((strcmp(Path,FullName)))
			PRINT(("Entering Directory %s\n", FullName))
			total_sent+= RecursiveSend (FullName);
		}
		else
		{
			PRINT(("\nSending File %s\n", FullName))
			total_sent += SendThisFile (FullName, max_fragment_size);
		}
	}

	while ( FindNextFile(dirp, &entry) )
	{
		if (IsDirDots (entry.cFileName))
			continue;

		strcpy(FullName, Path);
		if(FullName[strlen(FullName)-1] == '\\')
			FullName[strlen(FullName)-1] = '/';

		if(FullName[strlen(FullName)-1] != '/')
			strcat(FullName,"/");

		strcat(FullName, entry.cFileName);

		if( entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			ASSERT((strcmp(Path,FullName)))
			PRINT(("Entering Directory %s\n", FullName))
			total_sent+= RecursiveSend (FullName);
		}
		else
		{
			PRINT(("\nSending File %s\n", FullName))
			total_sent += SendThisFile (FullName, max_fragment_size);
		}
	}
	FindClose(dirp);
	return total_sent;
}


#else

int RecursiveSend (char* Path)
{
	unsigned int total_sent = 0;
	struct dirent *entry;
	struct stat stats;
	char FullName[MAX_PATH + MAX_FILENAME];
	DIR *dirp;

	if ((dirp = opendir (Path)) == NULL)
	{
		perror(Path);
		EXIT(("RecursiveSend: ERROR, opendir failed\n"))
	}

/*
For SOLARIS users:
Why doesn't readdir work? It chops the first two characters of
all filenames.

You're probably linking with libucb and didn't read question
6.18. (Readdir in libucb.so wants you to include sys/dir.h,
but many SunOS 4.1.x programs included <dirent.h>, consequently,
you're mixing native <dirent.h> struct dirent with libucb
readdir(). The symptom of this mixup is that the first two
characters of each filename are missing. Make sure you use a
native compiler (default /opt/SUNWspro/bin/cc, which may not be in
your PATH), and not /usr/ucb/cc. 
*/

	while ((entry = readdir(dirp)) != NULL)
	{
		if (IsDirDots (entry->d_name))
			continue;

		strcpy(FullName, Path);
		if (FullName[strlen(FullName)-1] != '/')
			strcat(FullName, "/");

		strcat(FullName, entry->d_name);

		if (stat(FullName, &stats) == -1)
		{
			perror("RecursiveSend: ERROR, stat failed");
			PRINT(("RecursiveSend: FullName=%s\nentry->d_name=%s\nPath=%s\n", FullName, entry->d_name, Path))
			EXIT(("RecursiveSend: ERROR, stat() failed\n"))
		}

		if (S_ISDIR(stats.st_mode))
		{
			ASSERT((strcmp(Path,FullName)))
			PRINT(("Entering Directory %s\n", FullName))
			total_sent+= RecursiveSend (FullName);
		}
		else
		{
			PRINT(("Sending File %s\n", FullName))
			total_sent += SendThisFile (FullName, max_fragment_size);
		}
	}
	closedir (dirp);
	return total_sent;
}

#endif



int SendThisFile (char *file_path, int fragment_len)
{
	char 	file_base[MAX_PATH];
	char 	file_name[MAX_FILENAME];
	char	length[20];
	char	BlockTmp4[4];
	trailer_t trailer;
	struct stat file_stats;
	FILE	*file_to_send 		= NULL;
	char	*buf_file		= NULL;
	int	sent			= 0;
	int 	filesize		= 0;
	unsigned short global_sum 	= 0;
	unsigned short checksum		= 0;
	unsigned char must_swap		= 0;

	int		nb_fragments = 0;
	int		ObjectLength = 0;
	int		CurrOffset = 0;
	int		fragsize = 0;
	int		i;
	char	fragment[20];
	char	offset[20];


	trailer.size = 0;
	trailer.buffer = NULL;
	
//	if(mcl_ctl(id, MCL_OPT_KEEP_DATA, NULL, 0))
//		EXIT(("fcast: mcl_ctl returned an error\n"))
	
	if(FileExist(file_path))
	{	if(stat(file_path, &file_stats) == -1)
		{	PRINT(("Error: stat()\n"))
			goto end;
		}
		file_to_send = fopen(file_path, "rb");
	}
	else
	{	PRINT(("Error: %s, no such file!\n", file_path))
		goto end;
	}
	if( !(file_stats.st_mode & S_IFREG) )
		EXIT(("Error: %s is not a regular file\n", file_path))		

	ASSERT(fragment_len > 0);

	if(file_stats.st_size < fragment_len )
	{
		nb_fragments = 1;
	}
	else
	{
		nb_fragments = file_stats.st_size / fragment_len;
		if (file_stats.st_size % fragment_len)
		{
			nb_fragments++;
		}
	}
	PRINT(("*** Stripping file %s into %d fragment(s)\n", file_path, nb_fragments))

	GetFileBaseWithoutPrefix(file_path, file_base);

	for( i=1; i<=nb_fragments; i++)
	{
		if(!(buf_file = (char*)malloc(fragment_len))) {
			EXIT(("Error: Cannot alloc memory!\n"))
		}

		if( (ObjectLength = fread(buf_file, 1, fragment_len , file_to_send)) < 0)
			EXIT(("Error FcastSend: fread failed, returned %d\n", ObjectLength))

		if(strlen(file_base)>0)
		{
			AddMetadata(&trailer, "Content-Base", file_base);
		}

		GetFileName(file_path, file_name);
		AddMetadata(&trailer, "Content-Location", file_name);

		filesize = file_stats.st_size;
		sprintf(length, "%d", filesize);
		AddMetadata(&trailer, "Content-Filesize", length);

		fragsize = ObjectLength;
		sprintf(length, "%d", fragsize);
		AddMetadata(&trailer, "Content-Length", length);

		sprintf( fragment, "%d/%d", i, nb_fragments);
		AddMetadata(&trailer, "Content-Fragment", fragment);

		sprintf( offset, "%d", CurrOffset);
		CurrOffset += ObjectLength;
		AddMetadata(&trailer, "Content-Offset", offset);

		EndTrailer(&trailer);

		if(trailer.size + 4 > MAX_TRAILER_SIZE) {
			EXIT(("Error: Trailer is too big! (max=%d)\n", MAX_TRAILER_SIZE-4))
		}
/*
		else
			PRINT(("Trailer length is %ld bytes\n",trailer.size-4))
*/
		
		if (!(buf_file = (char*)realloc(buf_file, ObjectLength + trailer.size))) {
			EXIT(("Error: Cannot realloc memory!\n"))
		}
		memcpy( buf_file + ObjectLength, trailer.buffer, trailer.size);
		ObjectLength+= trailer.size;
		DeleteTrailer(&trailer);

		global_sum = ComputeSum( (unsigned short*)buf_file, ObjectLength, &must_swap );
		checksum = ComputeChecksum(global_sum, must_swap);

		*(unsigned short*)BlockTmp4 = 0x0000;
		*(unsigned short*)(BlockTmp4+2) = checksum;

		if (!(buf_file = (char*)realloc(buf_file,  ObjectLength + 4))) {
			EXIT(("Error: Cannot realloc memory!\n")) }
		memcpy( buf_file + ObjectLength, BlockTmp4, 4);
		ObjectLength += 4;

		PRINT(("Sending file %s slice %d (Data: %d Bytes - Trailer: %d Bytes)\n", file_path, i, fragsize, ObjectLength-fragsize-8))
		if (mcl_send(id, buf_file, ObjectLength) < 0)
			EXIT((": mcl_send %ld failed\n", trailer.size))
		sent+= ObjectLength;

		if(buf_file) free(buf_file);
	}

	fclose(file_to_send);
//	ASSERT(sent == file_stats.st_size)

	PRINT(("File %s (%d Bytes) sent.\n\t%d fragments (objects) transfered for this file.\n\t%d Bytes transfered for this file.\n", file_path, filesize, nb_fragments, sent))

end:

//	if(mcl_ctl(id, MCL_OPT_PUSH_DATA, NULL, 0))
//		EXIT(("fcast: mcl_ctl returned an error\n"))

	return sent;
}

